"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[824],{30523:e=>{e.exports=JSON.parse('{"functions":[{"name":"matches","desc":"Returns a value with information about whether or not the input matches the type.","params":[{"name":"self","desc":"","lua_type":"Type"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"},{"desc":"","lua_type":"Cause"}],"function_type":"static","source":{"line":451,"path":"src/GreenTea.luau"}},{"name":"assert","desc":"Errors if the input does not match the type, otherwise returns the input.","params":[{"name":"self","desc":"","lua_type":"Type"},{"name":"...","desc":"","lua_type":"T..."}],"returns":[{"desc":"","lua_type":"T...\\n"}],"function_type":"static","source":{"line":458,"path":"src/GreenTea.luau"}},{"name":"format","desc":"Formats the type for display to the user.","params":[{"name":"self","desc":"","lua_type":"Type"}],"returns":[{"desc":"","lua_type":"string\\n"}],"function_type":"static","source":{"line":467,"path":"src/GreenTea.luau"}},{"name":"wrapFn","desc":"Wraps a function with type asserts for its input args and returns.","params":[{"name":"self","desc":"","lua_type":"Type"},{"name":"fn","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"T\\n"}],"function_type":"static","source":{"line":472,"path":"src/GreenTea.luau"}},{"name":"type","desc":"In type definitions via `typeof(Type.type())`, returns the Luau type this\\nGreenTea type represents.  \\nAt runtime, returns self. This allows you to compose complex GreenTea types\\nby passing GreenTea.type() into a GreenTea constructor. (Only applies when\\n\\"built\\" with `GreenTea.build(GreenTea constructors here)`)","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"...any\\n"}],"function_type":"static","source":{"line":488,"path":"src/GreenTea.luau"}},{"name":"formatErr","desc":"Formats the type for display to the user highlighting a specific type.","params":[{"name":"self","desc":"","lua_type":"Type"},{"name":"cause","desc":"","lua_type":"Cause"}],"returns":[{"desc":"","lua_type":"string\\n"}],"function_type":"static","source":{"line":614,"path":"src/GreenTea.luau"}}],"properties":[{"name":"kind","desc":"","lua_type":"string","source":{"line":400,"path":"src/GreenTea.luau"}},{"name":"meta","desc":"Contains user-specified metadata about the type.","lua_type":"{ [string]: any }?","source":{"line":404,"path":"src/GreenTea.luau"}},{"name":"basic","desc":"","lua_type":"{ typeof: string?, type: string? }?","source":{"line":407,"path":"src/GreenTea.luau"}},{"name":"any","desc":"","lua_type":"{ allowNil: boolean? }?","source":{"line":410,"path":"src/GreenTea.luau"}},{"name":"unknown","desc":"","lua_type":"{ allowNil: boolean? }?","source":{"line":413,"path":"src/GreenTea.luau"}},{"name":"custom","desc":"","lua_type":"{ type: Type?, name: string, typechecker: (any) -> (boolean, any?) }?","source":{"line":416,"path":"src/GreenTea.luau"}},{"name":"number","desc":"","lua_type":"{ range: Range?, integer: boolean? }?","source":{"line":419,"path":"src/GreenTea.luau"}},{"name":"string","desc":"","lua_type":"{ pattern: string?, bytes: Range?, graphemes: Range?, unicode: boolean? }?","source":{"line":422,"path":"src/GreenTea.luau"}},{"name":"thread","desc":"","lua_type":"{ status: { [CoroutineStatus]: boolean }? }?","source":{"line":425,"path":"src/GreenTea.luau"}},{"name":"instanceIsA","desc":"","lua_type":"{ class: string }?","source":{"line":428,"path":"src/GreenTea.luau"}},{"name":"literal","desc":"","lua_type":"{ value: any }?","source":{"line":431,"path":"src/GreenTea.luau"}},{"name":"tuple","desc":"","lua_type":"{ contents: { Type }, vararg: Type? }?","source":{"line":434,"path":"src/GreenTea.luau"}},{"name":"vararg","desc":"","lua_type":"{ type: Type, length: Range? }?","source":{"line":437,"path":"src/GreenTea.luau"}},{"name":"fn","desc":"","lua_type":"{ args: Type, returns: Type }?","source":{"line":440,"path":"src/GreenTea.luau"}},{"name":"table","desc":"","lua_type":"{ contents: { [string]: Type }, indexer: { key: Type, value: Type }, array: boolean?, count: Range?, raw: boolean? }?","source":{"line":443,"path":"src/GreenTea.luau"}},{"name":"intersection","desc":"","lua_type":"{ contents: { Type } }?","source":{"line":446,"path":"src/GreenTea.luau"}},{"name":"union","desc":"","lua_type":"{ contents: { Type }, optional: boolean? }?","source":{"line":449,"path":"src/GreenTea.luau"}}],"types":[{"name":"Range","desc":"","lua_type":"{ min: number?, minExclusive: boolean, max: number?, maxExclusive: boolean }","source":{"line":386,"path":"src/GreenTea.luau"}},{"name":"Cause","desc":"Represents the result of a :matches() call.  \\nIncludes a `__tostring` metamethod, which formats to a readable error.","lua_type":"{ ok: boolean, encompassingType: Type?, errs: { { type: any, input: any?, message: string? } }, formatErr: (self: Cause) -> string }","source":{"line":397,"path":"src/GreenTea.luau"}}],"name":"Type","desc":"Represents a type we can check against or inspect.  \\nUse the methods to check against the type.  \\nUse the properties to inspect the type.","source":{"line":383,"path":"src/GreenTea.luau"}}')}}]);