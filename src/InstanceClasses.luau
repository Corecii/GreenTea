local GreenTea = require(script.Parent.GreenTea)

local highlightWrap = GreenTea.__highlightWrap
local Cause = GreenTea.__Cause
local Type = GreenTea.__Type

local InstanceClasses = {}

setmetatable(InstanceClasses, {
	__call = function(self: any, class: string): any
		local self
		self = {
			kind = "InstanceIsA",
			instanceIsA = {
				class = class,
			},
			_matches = function(input: any, ...: any): ()
				if typeof(input) == "Instance" and input:IsA(class) then
					return Cause.ok()
				else
					return Cause.err(self, input, `expected an instance of {class}, got $input`)
				end
			end,
			_format = function(highlight: { [any]: string }, maxLineLength: number, recurse: { [any]: any })
				return highlightWrap(class, highlight[self])
			end,
		}
		return setmetatable(self, Type) :: any
	end,
})

local function class(name: string): any
	return function(): any
		local self
		self = {
			kind = "InstanceIsA",
			class = class,
			_matches = function(input: any)
				if typeof(input) == "Instance" then
					if input:IsA(name) then
						return Cause.ok()
					else
						return Cause.err(self, input, `expected {name}, got {input.ClassName}`)
					end
				else
					return Cause.err(self, input, `expected {name}, got {typeof(input)}`)
				end
			end,
			_format = function(highlight: { [any]: string }, maxLineLength: number, recurse: { [any]: any })
				return highlightWrap(name, highlight[self])
			end,
		}
		return setmetatable(self, Type) :: any
	end
end

InstanceClasses.Instance = class("Instance") :: () -> Instance
InstanceClasses.AccessoryDescription = class("AccessoryDescription") :: () -> AccessoryDescription
InstanceClasses.AccountService = class("AccountService") :: () -> AccountService
InstanceClasses.Accoutrement = class("Accoutrement") :: () -> Accoutrement
InstanceClasses.Accessory = class("Accessory") :: () -> Accessory
InstanceClasses.Hat = class("Hat") :: () -> Hat
InstanceClasses.AdPortal = class("AdPortal") :: () -> AdPortal
InstanceClasses.AdService = class("AdService") :: () -> AdService
InstanceClasses.AdvancedDragger = class("AdvancedDragger") :: () -> AdvancedDragger
InstanceClasses.AnalyticsService = class("AnalyticsService") :: () -> AnalyticsService
InstanceClasses.Animation = class("Animation") :: () -> Animation
InstanceClasses.AnimationClip = class("AnimationClip") :: () -> AnimationClip
InstanceClasses.CurveAnimation = class("CurveAnimation") :: () -> CurveAnimation
InstanceClasses.KeyframeSequence = class("KeyframeSequence") :: () -> KeyframeSequence
InstanceClasses.AnimationClipProvider = class("AnimationClipProvider") :: () -> AnimationClipProvider
InstanceClasses.AnimationController = class("AnimationController") :: () -> AnimationController
InstanceClasses.AnimationFromVideoCreatorService =
	class("AnimationFromVideoCreatorService") :: () -> AnimationFromVideoCreatorService
InstanceClasses.AnimationFromVideoCreatorStudioService =
	class("AnimationFromVideoCreatorStudioService") :: () -> AnimationFromVideoCreatorStudioService
InstanceClasses.AnimationRigData = class("AnimationRigData") :: () -> AnimationRigData
InstanceClasses.AnimationStreamTrack = class("AnimationStreamTrack") :: () -> AnimationStreamTrack
InstanceClasses.AnimationTrack = class("AnimationTrack") :: () -> AnimationTrack
InstanceClasses.Animator = class("Animator") :: () -> Animator
InstanceClasses.AppUpdateService = class("AppUpdateService") :: () -> AppUpdateService
InstanceClasses.AssetCounterService = class("AssetCounterService") :: () -> AssetCounterService
InstanceClasses.AssetDeliveryProxy = class("AssetDeliveryProxy") :: () -> AssetDeliveryProxy
InstanceClasses.AssetImportService = class("AssetImportService") :: () -> AssetImportService
InstanceClasses.AssetImportSession = class("AssetImportSession") :: () -> AssetImportSession
InstanceClasses.AssetManagerService = class("AssetManagerService") :: () -> AssetManagerService
InstanceClasses.AssetPatchSettings = class("AssetPatchSettings") :: () -> AssetPatchSettings
InstanceClasses.AssetService = class("AssetService") :: () -> AssetService
InstanceClasses.Atmosphere = class("Atmosphere") :: () -> Atmosphere
InstanceClasses.Attachment = class("Attachment") :: () -> Attachment
InstanceClasses.Bone = class("Bone") :: () -> Bone
InstanceClasses.AudioAnalyzer = class("AudioAnalyzer") :: () -> AudioAnalyzer
InstanceClasses.AudioChorus = class("AudioChorus") :: () -> AudioChorus
InstanceClasses.AudioCompressor = class("AudioCompressor") :: () -> AudioCompressor
InstanceClasses.AudioDeviceInput = class("AudioDeviceInput") :: () -> AudioDeviceInput
InstanceClasses.AudioDeviceOutput = class("AudioDeviceOutput") :: () -> AudioDeviceOutput
InstanceClasses.AudioDistortion = class("AudioDistortion") :: () -> AudioDistortion
InstanceClasses.AudioEcho = class("AudioEcho") :: () -> AudioEcho
InstanceClasses.AudioEmitter = class("AudioEmitter") :: () -> AudioEmitter
InstanceClasses.AudioEqualizer = class("AudioEqualizer") :: () -> AudioEqualizer
InstanceClasses.AudioFader = class("AudioFader") :: () -> AudioFader
InstanceClasses.AudioFlanger = class("AudioFlanger") :: () -> AudioFlanger
InstanceClasses.AudioListener = class("AudioListener") :: () -> AudioListener
InstanceClasses.AudioPitchShifter = class("AudioPitchShifter") :: () -> AudioPitchShifter
InstanceClasses.AudioPlayer = class("AudioPlayer") :: () -> AudioPlayer
InstanceClasses.AudioReverb = class("AudioReverb") :: () -> AudioReverb
InstanceClasses.AudioSearchParams = class("AudioSearchParams") :: () -> AudioSearchParams
InstanceClasses.AvatarChatService = class("AvatarChatService") :: () -> AvatarChatService
InstanceClasses.AvatarCreationService = class("AvatarCreationService") :: () -> AvatarCreationService
InstanceClasses.AvatarEditorService = class("AvatarEditorService") :: () -> AvatarEditorService
InstanceClasses.AvatarImportService = class("AvatarImportService") :: () -> AvatarImportService
InstanceClasses.Backpack = class("Backpack") :: () -> Backpack
InstanceClasses.BadgeService = class("BadgeService") :: () -> BadgeService
InstanceClasses.BaseImportData = class("BaseImportData") :: () -> BaseImportData
InstanceClasses.AnimationImportData = class("AnimationImportData") :: () -> AnimationImportData
InstanceClasses.FacsImportData = class("FacsImportData") :: () -> FacsImportData
InstanceClasses.GroupImportData = class("GroupImportData") :: () -> GroupImportData
InstanceClasses.JointImportData = class("JointImportData") :: () -> JointImportData
InstanceClasses.MaterialImportData = class("MaterialImportData") :: () -> MaterialImportData
InstanceClasses.MeshImportData = class("MeshImportData") :: () -> MeshImportData
InstanceClasses.RootImportData = class("RootImportData") :: () -> RootImportData
InstanceClasses.BasePlayerGui = class("BasePlayerGui") :: () -> BasePlayerGui
InstanceClasses.CoreGui = class("CoreGui") :: () -> CoreGui
InstanceClasses.PlayerGui = class("PlayerGui") :: () -> PlayerGui
InstanceClasses.StarterGui = class("StarterGui") :: () -> StarterGui
InstanceClasses.BaseRemoteEvent = class("BaseRemoteEvent") :: () -> BaseRemoteEvent
InstanceClasses.RemoteEvent = class("RemoteEvent") :: () -> RemoteEvent
InstanceClasses.UnreliableRemoteEvent = class("UnreliableRemoteEvent") :: () -> UnreliableRemoteEvent
InstanceClasses.BaseWrap = class("BaseWrap") :: () -> BaseWrap
InstanceClasses.WrapLayer = class("WrapLayer") :: () -> WrapLayer
InstanceClasses.WrapTarget = class("WrapTarget") :: () -> WrapTarget
InstanceClasses.Beam = class("Beam") :: () -> Beam
InstanceClasses.BindableEvent = class("BindableEvent") :: () -> BindableEvent
InstanceClasses.BindableFunction = class("BindableFunction") :: () -> BindableFunction
InstanceClasses.BodyMover = class("BodyMover") :: () -> BodyMover
InstanceClasses.BodyAngularVelocity = class("BodyAngularVelocity") :: () -> BodyAngularVelocity
InstanceClasses.BodyForce = class("BodyForce") :: () -> BodyForce
InstanceClasses.BodyGyro = class("BodyGyro") :: () -> BodyGyro
InstanceClasses.BodyPosition = class("BodyPosition") :: () -> BodyPosition
InstanceClasses.BodyThrust = class("BodyThrust") :: () -> BodyThrust
InstanceClasses.BodyVelocity = class("BodyVelocity") :: () -> BodyVelocity
InstanceClasses.RocketPropulsion = class("RocketPropulsion") :: () -> RocketPropulsion
InstanceClasses.BodyPartDescription = class("BodyPartDescription") :: () -> BodyPartDescription
InstanceClasses.Breakpoint = class("Breakpoint") :: () -> Breakpoint
InstanceClasses.BrowserService = class("BrowserService") :: () -> BrowserService
InstanceClasses.BubbleChatMessageProperties = class("BubbleChatMessageProperties") :: () -> BubbleChatMessageProperties
InstanceClasses.BulkImportService = class("BulkImportService") :: () -> BulkImportService
InstanceClasses.CacheableContentProvider = class("CacheableContentProvider") :: () -> CacheableContentProvider
InstanceClasses.HSRDataContentProvider = class("HSRDataContentProvider") :: () -> HSRDataContentProvider
InstanceClasses.MeshContentProvider = class("MeshContentProvider") :: () -> MeshContentProvider
InstanceClasses.SolidModelContentProvider = class("SolidModelContentProvider") :: () -> SolidModelContentProvider
InstanceClasses.CalloutService = class("CalloutService") :: () -> CalloutService
InstanceClasses.Camera = class("Camera") :: () -> Camera
InstanceClasses.CaptureService = class("CaptureService") :: () -> CaptureService
InstanceClasses.ChangeHistoryService = class("ChangeHistoryService") :: () -> ChangeHistoryService
InstanceClasses.CharacterAppearance = class("CharacterAppearance") :: () -> CharacterAppearance
InstanceClasses.BodyColors = class("BodyColors") :: () -> BodyColors
InstanceClasses.CharacterMesh = class("CharacterMesh") :: () -> CharacterMesh
InstanceClasses.Clothing = class("Clothing") :: () -> Clothing
InstanceClasses.Pants = class("Pants") :: () -> Pants
InstanceClasses.Shirt = class("Shirt") :: () -> Shirt
InstanceClasses.ShirtGraphic = class("ShirtGraphic") :: () -> ShirtGraphic
InstanceClasses.Skin = class("Skin") :: () -> Skin
InstanceClasses.Chat = class("Chat") :: () -> Chat
InstanceClasses.ChatbotUIService = class("ChatbotUIService") :: () -> ChatbotUIService
InstanceClasses.ClickDetector = class("ClickDetector") :: () -> ClickDetector
InstanceClasses.DragDetector = class("DragDetector") :: () -> DragDetector
InstanceClasses.Clouds = class("Clouds") :: () -> Clouds
InstanceClasses.ClusterPacketCache = class("ClusterPacketCache") :: () -> ClusterPacketCache
InstanceClasses.Collaborator = class("Collaborator") :: () -> Collaborator
InstanceClasses.CollaboratorsService = class("CollaboratorsService") :: () -> CollaboratorsService
InstanceClasses.CollectionService = class("CollectionService") :: () -> CollectionService
InstanceClasses.CommandInstance = class("CommandInstance") :: () -> CommandInstance
InstanceClasses.CommandService = class("CommandService") :: () -> CommandService
InstanceClasses.Configuration = class("Configuration") :: () -> Configuration
InstanceClasses.ConfigureServerService = class("ConfigureServerService") :: () -> ConfigureServerService
InstanceClasses.Constraint = class("Constraint") :: () -> Constraint
InstanceClasses.AlignOrientation = class("AlignOrientation") :: () -> AlignOrientation
InstanceClasses.AlignPosition = class("AlignPosition") :: () -> AlignPosition
InstanceClasses.AngularVelocity = class("AngularVelocity") :: () -> AngularVelocity
InstanceClasses.AnimationConstraint = class("AnimationConstraint") :: () -> AnimationConstraint
InstanceClasses.BallSocketConstraint = class("BallSocketConstraint") :: () -> BallSocketConstraint
InstanceClasses.HingeConstraint = class("HingeConstraint") :: () -> HingeConstraint
InstanceClasses.LineForce = class("LineForce") :: () -> LineForce
InstanceClasses.LinearVelocity = class("LinearVelocity") :: () -> LinearVelocity
InstanceClasses.PlaneConstraint = class("PlaneConstraint") :: () -> PlaneConstraint
InstanceClasses.Plane = class("Plane") :: () -> Plane
InstanceClasses.RigidConstraint = class("RigidConstraint") :: () -> RigidConstraint
InstanceClasses.RodConstraint = class("RodConstraint") :: () -> RodConstraint
InstanceClasses.RopeConstraint = class("RopeConstraint") :: () -> RopeConstraint
InstanceClasses.SlidingBallConstraint = class("SlidingBallConstraint") :: () -> SlidingBallConstraint
InstanceClasses.CylindricalConstraint = class("CylindricalConstraint") :: () -> CylindricalConstraint
InstanceClasses.PrismaticConstraint = class("PrismaticConstraint") :: () -> PrismaticConstraint
InstanceClasses.SpringConstraint = class("SpringConstraint") :: () -> SpringConstraint
InstanceClasses.Torque = class("Torque") :: () -> Torque
InstanceClasses.TorsionSpringConstraint = class("TorsionSpringConstraint") :: () -> TorsionSpringConstraint
InstanceClasses.UniversalConstraint = class("UniversalConstraint") :: () -> UniversalConstraint
InstanceClasses.VectorForce = class("VectorForce") :: () -> VectorForce
InstanceClasses.ContentProvider = class("ContentProvider") :: () -> ContentProvider
InstanceClasses.ContextActionService = class("ContextActionService") :: () -> ContextActionService
InstanceClasses.Controller = class("Controller") :: () -> Controller
InstanceClasses.HumanoidController = class("HumanoidController") :: () -> HumanoidController
InstanceClasses.SkateboardController = class("SkateboardController") :: () -> SkateboardController
InstanceClasses.VehicleController = class("VehicleController") :: () -> VehicleController
InstanceClasses.ControllerBase = class("ControllerBase") :: () -> ControllerBase
InstanceClasses.AirController = class("AirController") :: () -> AirController
InstanceClasses.ClimbController = class("ClimbController") :: () -> ClimbController
InstanceClasses.GroundController = class("GroundController") :: () -> GroundController
InstanceClasses.SwimController = class("SwimController") :: () -> SwimController
InstanceClasses.ControllerManager = class("ControllerManager") :: () -> ControllerManager
InstanceClasses.ControllerService = class("ControllerService") :: () -> ControllerService
InstanceClasses.CookiesService = class("CookiesService") :: () -> CookiesService
InstanceClasses.CorePackages = class("CorePackages") :: () -> CorePackages
InstanceClasses.CoreScriptDebuggingManagerHelper =
	class("CoreScriptDebuggingManagerHelper") :: () -> CoreScriptDebuggingManagerHelper
InstanceClasses.CoreScriptSyncService = class("CoreScriptSyncService") :: () -> CoreScriptSyncService
InstanceClasses.CreationDBService = class("CreationDBService") :: () -> CreationDBService
InstanceClasses.CrossDMScriptChangeListener = class("CrossDMScriptChangeListener") :: () -> CrossDMScriptChangeListener
InstanceClasses.CustomEvent = class("CustomEvent") :: () -> CustomEvent
InstanceClasses.CustomEventReceiver = class("CustomEventReceiver") :: () -> CustomEventReceiver
InstanceClasses.DataModelMesh = class("DataModelMesh") :: () -> DataModelMesh
InstanceClasses.BevelMesh = class("BevelMesh") :: () -> BevelMesh
InstanceClasses.CylinderMesh = class("CylinderMesh") :: () -> CylinderMesh
InstanceClasses.EditableMesh = class("EditableMesh") :: () -> EditableMesh
InstanceClasses.FileMesh = class("FileMesh") :: () -> FileMesh
InstanceClasses.SpecialMesh = class("SpecialMesh") :: () -> SpecialMesh
InstanceClasses.DataModelPatchService = class("DataModelPatchService") :: () -> DataModelPatchService
InstanceClasses.DataModelSession = class("DataModelSession") :: () -> DataModelSession
InstanceClasses.DataStoreGetOptions = class("DataStoreGetOptions") :: () -> DataStoreGetOptions
InstanceClasses.DataStoreIncrementOptions = class("DataStoreIncrementOptions") :: () -> DataStoreIncrementOptions
InstanceClasses.DataStoreInfo = class("DataStoreInfo") :: () -> DataStoreInfo
InstanceClasses.DataStoreKey = class("DataStoreKey") :: () -> DataStoreKey
InstanceClasses.DataStoreKeyInfo = class("DataStoreKeyInfo") :: () -> DataStoreKeyInfo
InstanceClasses.DataStoreObjectVersionInfo = class("DataStoreObjectVersionInfo") :: () -> DataStoreObjectVersionInfo
InstanceClasses.DataStoreOptions = class("DataStoreOptions") :: () -> DataStoreOptions
InstanceClasses.DataStoreService = class("DataStoreService") :: () -> DataStoreService
InstanceClasses.DataStoreSetOptions = class("DataStoreSetOptions") :: () -> DataStoreSetOptions
InstanceClasses.Debris = class("Debris") :: () -> Debris
InstanceClasses.DebugSettings = class("DebugSettings") :: () -> DebugSettings
InstanceClasses.DebuggablePluginWatcher = class("DebuggablePluginWatcher") :: () -> DebuggablePluginWatcher
InstanceClasses.DebuggerBreakpoint = class("DebuggerBreakpoint") :: () -> DebuggerBreakpoint
InstanceClasses.DebuggerConnection = class("DebuggerConnection") :: () -> DebuggerConnection
InstanceClasses.LocalDebuggerConnection = class("LocalDebuggerConnection") :: () -> LocalDebuggerConnection
InstanceClasses.DebuggerConnectionManager = class("DebuggerConnectionManager") :: () -> DebuggerConnectionManager
InstanceClasses.DebuggerLuaResponse = class("DebuggerLuaResponse") :: () -> DebuggerLuaResponse
InstanceClasses.DebuggerManager = class("DebuggerManager") :: () -> DebuggerManager
InstanceClasses.DebuggerUIService = class("DebuggerUIService") :: () -> DebuggerUIService
InstanceClasses.DebuggerVariable = class("DebuggerVariable") :: () -> DebuggerVariable
InstanceClasses.DebuggerWatch = class("DebuggerWatch") :: () -> DebuggerWatch
InstanceClasses.DeviceIdService = class("DeviceIdService") :: () -> DeviceIdService
InstanceClasses.Dialog = class("Dialog") :: () -> Dialog
InstanceClasses.DialogChoice = class("DialogChoice") :: () -> DialogChoice
InstanceClasses.DraftsService = class("DraftsService") :: () -> DraftsService
InstanceClasses.Dragger = class("Dragger") :: () -> Dragger
InstanceClasses.DraggerService = class("DraggerService") :: () -> DraggerService
InstanceClasses.EditableImage = class("EditableImage") :: () -> EditableImage
InstanceClasses.EngineAPICloudProcessingService =
	class("EngineAPICloudProcessingService") :: () -> EngineAPICloudProcessingService
InstanceClasses.EulerRotationCurve = class("EulerRotationCurve") :: () -> EulerRotationCurve
InstanceClasses.EventIngestService = class("EventIngestService") :: () -> EventIngestService
InstanceClasses.ExperienceAuthService = class("ExperienceAuthService") :: () -> ExperienceAuthService
InstanceClasses.ExperienceInviteOptions = class("ExperienceInviteOptions") :: () -> ExperienceInviteOptions
InstanceClasses.ExperienceNotificationService =
	class("ExperienceNotificationService") :: () -> ExperienceNotificationService
InstanceClasses.ExperienceService = class("ExperienceService") :: () -> ExperienceService
InstanceClasses.ExperienceStateCaptureService =
	class("ExperienceStateCaptureService") :: () -> ExperienceStateCaptureService
InstanceClasses.Explosion = class("Explosion") :: () -> Explosion
InstanceClasses.FaceAnimatorService = class("FaceAnimatorService") :: () -> FaceAnimatorService
InstanceClasses.FaceControls = class("FaceControls") :: () -> FaceControls
InstanceClasses.FaceInstance = class("FaceInstance") :: () -> FaceInstance
InstanceClasses.Decal = class("Decal") :: () -> Decal
InstanceClasses.Texture = class("Texture") :: () -> Texture
InstanceClasses.FacialAnimationRecordingService =
	class("FacialAnimationRecordingService") :: () -> FacialAnimationRecordingService
InstanceClasses.FacialAnimationStreamingServiceStats =
	class("FacialAnimationStreamingServiceStats") :: () -> FacialAnimationStreamingServiceStats
InstanceClasses.FacialAnimationStreamingServiceV2 =
	class("FacialAnimationStreamingServiceV2") :: () -> FacialAnimationStreamingServiceV2
InstanceClasses.FacialAnimationStreamingSubsessionStats =
	class("FacialAnimationStreamingSubsessionStats") :: () -> FacialAnimationStreamingSubsessionStats
InstanceClasses.Feature = class("Feature") :: () -> Feature
InstanceClasses.Hole = class("Hole") :: () -> Hole
InstanceClasses.MotorFeature = class("MotorFeature") :: () -> MotorFeature
InstanceClasses.File = class("File") :: () -> File
InstanceClasses.Fire = class("Fire") :: () -> Fire
InstanceClasses.FlagStandService = class("FlagStandService") :: () -> FlagStandService
InstanceClasses.FloatCurve = class("FloatCurve") :: () -> FloatCurve
InstanceClasses.FlyweightService = class("FlyweightService") :: () -> FlyweightService
InstanceClasses.CSGDictionaryService = class("CSGDictionaryService") :: () -> CSGDictionaryService
InstanceClasses.NonReplicatedCSGDictionaryService =
	class("NonReplicatedCSGDictionaryService") :: () -> NonReplicatedCSGDictionaryService
InstanceClasses.Folder = class("Folder") :: () -> Folder
InstanceClasses.ForceField = class("ForceField") :: () -> ForceField
InstanceClasses.FriendService = class("FriendService") :: () -> FriendService
InstanceClasses.FunctionalTest = class("FunctionalTest") :: () -> FunctionalTest
InstanceClasses.GamePassService = class("GamePassService") :: () -> GamePassService
InstanceClasses.GameSettings = class("GameSettings") :: () -> GameSettings
InstanceClasses.GamepadService = class("GamepadService") :: () -> GamepadService
InstanceClasses.Geometry = class("Geometry") :: () -> Geometry
InstanceClasses.GeometryService = class("GeometryService") :: () -> GeometryService
InstanceClasses.GetTextBoundsParams = class("GetTextBoundsParams") :: () -> GetTextBoundsParams
InstanceClasses.GlobalDataStore = class("GlobalDataStore") :: () -> GlobalDataStore
InstanceClasses.DataStore = class("DataStore") :: () -> DataStore
InstanceClasses.OrderedDataStore = class("OrderedDataStore") :: () -> OrderedDataStore
InstanceClasses.GoogleAnalyticsConfiguration =
	class("GoogleAnalyticsConfiguration") :: () -> GoogleAnalyticsConfiguration
InstanceClasses.GroupService = class("GroupService") :: () -> GroupService
InstanceClasses.GuiBase = class("GuiBase") :: () -> GuiBase
InstanceClasses.GuiBase2d = class("GuiBase2d") :: () -> GuiBase2d
InstanceClasses.GuiObject = class("GuiObject") :: () -> GuiObject
InstanceClasses.CanvasGroup = class("CanvasGroup") :: () -> CanvasGroup
InstanceClasses.Frame = class("Frame") :: () -> Frame
InstanceClasses.GuiButton = class("GuiButton") :: () -> GuiButton
InstanceClasses.ImageButton = class("ImageButton") :: () -> ImageButton
InstanceClasses.TextButton = class("TextButton") :: () -> TextButton
InstanceClasses.GuiLabel = class("GuiLabel") :: () -> GuiLabel
InstanceClasses.ImageLabel = class("ImageLabel") :: () -> ImageLabel
InstanceClasses.TextLabel = class("TextLabel") :: () -> TextLabel
InstanceClasses.ScrollingFrame = class("ScrollingFrame") :: () -> ScrollingFrame
InstanceClasses.TextBox = class("TextBox") :: () -> TextBox
InstanceClasses.VideoFrame = class("VideoFrame") :: () -> VideoFrame
InstanceClasses.ViewportFrame = class("ViewportFrame") :: () -> ViewportFrame
InstanceClasses.LayerCollector = class("LayerCollector") :: () -> LayerCollector
InstanceClasses.BillboardGui = class("BillboardGui") :: () -> BillboardGui
InstanceClasses.PluginGui = class("PluginGui") :: () -> PluginGui
InstanceClasses.DockWidgetPluginGui = class("DockWidgetPluginGui") :: () -> DockWidgetPluginGui
InstanceClasses.QWidgetPluginGui = class("QWidgetPluginGui") :: () -> QWidgetPluginGui
InstanceClasses.ScreenGui = class("ScreenGui") :: () -> ScreenGui
InstanceClasses.GuiMain = class("GuiMain") :: () -> GuiMain
InstanceClasses.SurfaceGuiBase = class("SurfaceGuiBase") :: () -> SurfaceGuiBase
InstanceClasses.AdGui = class("AdGui") :: () -> AdGui
InstanceClasses.SurfaceGui = class("SurfaceGui") :: () -> SurfaceGui
InstanceClasses.GuiBase3d = class("GuiBase3d") :: () -> GuiBase3d
InstanceClasses.FloorWire = class("FloorWire") :: () -> FloorWire
InstanceClasses.InstanceAdornment = class("InstanceAdornment") :: () -> InstanceAdornment
InstanceClasses.SelectionBox = class("SelectionBox") :: () -> SelectionBox
InstanceClasses.PVAdornment = class("PVAdornment") :: () -> PVAdornment
InstanceClasses.HandleAdornment = class("HandleAdornment") :: () -> HandleAdornment
InstanceClasses.BoxHandleAdornment = class("BoxHandleAdornment") :: () -> BoxHandleAdornment
InstanceClasses.ConeHandleAdornment = class("ConeHandleAdornment") :: () -> ConeHandleAdornment
InstanceClasses.CylinderHandleAdornment = class("CylinderHandleAdornment") :: () -> CylinderHandleAdornment
InstanceClasses.ImageHandleAdornment = class("ImageHandleAdornment") :: () -> ImageHandleAdornment
InstanceClasses.LineHandleAdornment = class("LineHandleAdornment") :: () -> LineHandleAdornment
InstanceClasses.SphereHandleAdornment = class("SphereHandleAdornment") :: () -> SphereHandleAdornment
InstanceClasses.WireframeHandleAdornment = class("WireframeHandleAdornment") :: () -> WireframeHandleAdornment
InstanceClasses.ParabolaAdornment = class("ParabolaAdornment") :: () -> ParabolaAdornment
InstanceClasses.SelectionSphere = class("SelectionSphere") :: () -> SelectionSphere
InstanceClasses.PartAdornment = class("PartAdornment") :: () -> PartAdornment
InstanceClasses.HandlesBase = class("HandlesBase") :: () -> HandlesBase
InstanceClasses.ArcHandles = class("ArcHandles") :: () -> ArcHandles
InstanceClasses.Handles = class("Handles") :: () -> Handles
InstanceClasses.SurfaceSelection = class("SurfaceSelection") :: () -> SurfaceSelection
InstanceClasses.SelectionLasso = class("SelectionLasso") :: () -> SelectionLasso
InstanceClasses.SelectionPartLasso = class("SelectionPartLasso") :: () -> SelectionPartLasso
InstanceClasses.SelectionPointLasso = class("SelectionPointLasso") :: () -> SelectionPointLasso
InstanceClasses.Path2D = class("Path2D") :: () -> Path2D
InstanceClasses.GuiService = class("GuiService") :: () -> GuiService
InstanceClasses.GuidRegistryService = class("GuidRegistryService") :: () -> GuidRegistryService
InstanceClasses.HapticService = class("HapticService") :: () -> HapticService
InstanceClasses.HeightmapImporterService = class("HeightmapImporterService") :: () -> HeightmapImporterService
InstanceClasses.HiddenSurfaceRemovalAsset = class("HiddenSurfaceRemovalAsset") :: () -> HiddenSurfaceRemovalAsset
InstanceClasses.Highlight = class("Highlight") :: () -> Highlight
InstanceClasses.Hopper = class("Hopper") :: () -> Hopper
InstanceClasses.HttpRbxApiService = class("HttpRbxApiService") :: () -> HttpRbxApiService
InstanceClasses.HttpRequest = class("HttpRequest") :: () -> HttpRequest
InstanceClasses.HttpService = class("HttpService") :: () -> HttpService
InstanceClasses.Humanoid = class("Humanoid") :: () -> Humanoid
InstanceClasses.HumanoidDescription = class("HumanoidDescription") :: () -> HumanoidDescription
InstanceClasses.IKControl = class("IKControl") :: () -> IKControl
InstanceClasses.ILegacyStudioBridge = class("ILegacyStudioBridge") :: () -> ILegacyStudioBridge
InstanceClasses.LegacyStudioBridge = class("LegacyStudioBridge") :: () -> LegacyStudioBridge
InstanceClasses.IXPService = class("IXPService") :: () -> IXPService
InstanceClasses.IncrementalPatchBuilder = class("IncrementalPatchBuilder") :: () -> IncrementalPatchBuilder
InstanceClasses.InputObject = class("InputObject") :: () -> InputObject
InstanceClasses.InsertService = class("InsertService") :: () -> InsertService
InstanceClasses.JointInstance = class("JointInstance") :: () -> JointInstance
InstanceClasses.DynamicRotate = class("DynamicRotate") :: () -> DynamicRotate
InstanceClasses.RotateP = class("RotateP") :: () -> RotateP
InstanceClasses.RotateV = class("RotateV") :: () -> RotateV
InstanceClasses.Glue = class("Glue") :: () -> Glue
InstanceClasses.ManualSurfaceJointInstance = class("ManualSurfaceJointInstance") :: () -> ManualSurfaceJointInstance
InstanceClasses.ManualGlue = class("ManualGlue") :: () -> ManualGlue
InstanceClasses.ManualWeld = class("ManualWeld") :: () -> ManualWeld
InstanceClasses.Motor = class("Motor") :: () -> Motor
InstanceClasses.Motor6D = class("Motor6D") :: () -> Motor6D
InstanceClasses.Rotate = class("Rotate") :: () -> Rotate
InstanceClasses.Snap = class("Snap") :: () -> Snap
InstanceClasses.VelocityMotor = class("VelocityMotor") :: () -> VelocityMotor
InstanceClasses.Weld = class("Weld") :: () -> Weld
InstanceClasses.JointsService = class("JointsService") :: () -> JointsService
InstanceClasses.KeyboardService = class("KeyboardService") :: () -> KeyboardService
InstanceClasses.Keyframe = class("Keyframe") :: () -> Keyframe
InstanceClasses.KeyframeMarker = class("KeyframeMarker") :: () -> KeyframeMarker
InstanceClasses.KeyframeSequenceProvider = class("KeyframeSequenceProvider") :: () -> KeyframeSequenceProvider
InstanceClasses.LSPFileSyncService = class("LSPFileSyncService") :: () -> LSPFileSyncService
InstanceClasses.LanguageService = class("LanguageService") :: () -> LanguageService
InstanceClasses.Light = class("Light") :: () -> Light
InstanceClasses.PointLight = class("PointLight") :: () -> PointLight
InstanceClasses.SpotLight = class("SpotLight") :: () -> SpotLight
InstanceClasses.SurfaceLight = class("SurfaceLight") :: () -> SurfaceLight
InstanceClasses.Lighting = class("Lighting") :: () -> Lighting
InstanceClasses.LiveScriptingService = class("LiveScriptingService") :: () -> LiveScriptingService
InstanceClasses.LocalStorageService = class("LocalStorageService") :: () -> LocalStorageService
InstanceClasses.AppStorageService = class("AppStorageService") :: () -> AppStorageService
InstanceClasses.UserStorageService = class("UserStorageService") :: () -> UserStorageService
InstanceClasses.LocalizationService = class("LocalizationService") :: () -> LocalizationService
InstanceClasses.LocalizationTable = class("LocalizationTable") :: () -> LocalizationTable
InstanceClasses.CloudLocalizationTable = class("CloudLocalizationTable") :: () -> CloudLocalizationTable
InstanceClasses.LodDataEntity = class("LodDataEntity") :: () -> LodDataEntity
InstanceClasses.LodDataService = class("LodDataService") :: () -> LodDataService
InstanceClasses.LogReporterService = class("LogReporterService") :: () -> LogReporterService
InstanceClasses.LogService = class("LogService") :: () -> LogService
InstanceClasses.LoginService = class("LoginService") :: () -> LoginService
InstanceClasses.LuaSettings = class("LuaSettings") :: () -> LuaSettings
InstanceClasses.LuaSourceContainer = class("LuaSourceContainer") :: () -> LuaSourceContainer
InstanceClasses.BaseScript = class("BaseScript") :: () -> BaseScript
InstanceClasses.CoreScript = class("CoreScript") :: () -> CoreScript
InstanceClasses.Script = class("Script") :: () -> Script
InstanceClasses.LocalScript = class("LocalScript") :: () -> LocalScript
InstanceClasses.ModuleScript = class("ModuleScript") :: () -> ModuleScript
InstanceClasses.LuaWebService = class("LuaWebService") :: () -> LuaWebService
InstanceClasses.LuauScriptAnalyzerService = class("LuauScriptAnalyzerService") :: () -> LuauScriptAnalyzerService
InstanceClasses.MarkerCurve = class("MarkerCurve") :: () -> MarkerCurve
InstanceClasses.MarketplaceService = class("MarketplaceService") :: () -> MarketplaceService
InstanceClasses.MaterialGenerationService = class("MaterialGenerationService") :: () -> MaterialGenerationService
InstanceClasses.MaterialGenerationSession = class("MaterialGenerationSession") :: () -> MaterialGenerationSession
InstanceClasses.MaterialService = class("MaterialService") :: () -> MaterialService
InstanceClasses.MaterialVariant = class("MaterialVariant") :: () -> MaterialVariant
InstanceClasses.MemStorageConnection = class("MemStorageConnection") :: () -> MemStorageConnection
InstanceClasses.MemStorageService = class("MemStorageService") :: () -> MemStorageService
InstanceClasses.MemoryStoreHashMap = class("MemoryStoreHashMap") :: () -> MemoryStoreHashMap
InstanceClasses.MemoryStoreQueue = class("MemoryStoreQueue") :: () -> MemoryStoreQueue
InstanceClasses.MemoryStoreService = class("MemoryStoreService") :: () -> MemoryStoreService
InstanceClasses.MemoryStoreSortedMap = class("MemoryStoreSortedMap") :: () -> MemoryStoreSortedMap
InstanceClasses.Message = class("Message") :: () -> Message
InstanceClasses.Hint = class("Hint") :: () -> Hint
InstanceClasses.MessageBusConnection = class("MessageBusConnection") :: () -> MessageBusConnection
InstanceClasses.MessageBusService = class("MessageBusService") :: () -> MessageBusService
InstanceClasses.MessagingService = class("MessagingService") :: () -> MessagingService
InstanceClasses.MetaBreakpoint = class("MetaBreakpoint") :: () -> MetaBreakpoint
InstanceClasses.MetaBreakpointContext = class("MetaBreakpointContext") :: () -> MetaBreakpointContext
InstanceClasses.MetaBreakpointManager = class("MetaBreakpointManager") :: () -> MetaBreakpointManager
InstanceClasses.Mouse = class("Mouse") :: () -> Mouse
InstanceClasses.PlayerMouse = class("PlayerMouse") :: () -> PlayerMouse
InstanceClasses.PluginMouse = class("PluginMouse") :: () -> PluginMouse
InstanceClasses.MouseService = class("MouseService") :: () -> MouseService
InstanceClasses.MultipleDocumentInterfaceInstance =
	class("MultipleDocumentInterfaceInstance") :: () -> MultipleDocumentInterfaceInstance
InstanceClasses.NetworkMarker = class("NetworkMarker") :: () -> NetworkMarker
InstanceClasses.NetworkPeer = class("NetworkPeer") :: () -> NetworkPeer
InstanceClasses.NetworkClient = class("NetworkClient") :: () -> NetworkClient
InstanceClasses.NetworkServer = class("NetworkServer") :: () -> NetworkServer
InstanceClasses.NetworkReplicator = class("NetworkReplicator") :: () -> NetworkReplicator
InstanceClasses.ClientReplicator = class("ClientReplicator") :: () -> ClientReplicator
InstanceClasses.ServerReplicator = class("ServerReplicator") :: () -> ServerReplicator
InstanceClasses.NetworkSettings = class("NetworkSettings") :: () -> NetworkSettings
InstanceClasses.NoCollisionConstraint = class("NoCollisionConstraint") :: () -> NoCollisionConstraint
InstanceClasses.NotificationService = class("NotificationService") :: () -> NotificationService
InstanceClasses.OmniRecommendationsService = class("OmniRecommendationsService") :: () -> OmniRecommendationsService
InstanceClasses.OpenCloudApiV1 = class("OpenCloudApiV1") :: () -> OpenCloudApiV1
InstanceClasses.OpenCloudService = class("OpenCloudService") :: () -> OpenCloudService
InstanceClasses.OperationGraph = class("OperationGraph") :: () -> OperationGraph
InstanceClasses.PVInstance = class("PVInstance") :: () -> PVInstance
InstanceClasses.BasePart = class("BasePart") :: () -> BasePart
InstanceClasses.CornerWedgePart = class("CornerWedgePart") :: () -> CornerWedgePart
InstanceClasses.FormFactorPart = class("FormFactorPart") :: () -> FormFactorPart
InstanceClasses.Part = class("Part") :: () -> Part
InstanceClasses.FlagStand = class("FlagStand") :: () -> FlagStand
InstanceClasses.Platform = class("Platform") :: () -> Platform
InstanceClasses.Seat = class("Seat") :: () -> Seat
InstanceClasses.SkateboardPlatform = class("SkateboardPlatform") :: () -> SkateboardPlatform
InstanceClasses.SpawnLocation = class("SpawnLocation") :: () -> SpawnLocation
InstanceClasses.WedgePart = class("WedgePart") :: () -> WedgePart
InstanceClasses.Terrain = class("Terrain") :: () -> Terrain
InstanceClasses.TriangleMeshPart = class("TriangleMeshPart") :: () -> TriangleMeshPart
InstanceClasses.MeshPart = class("MeshPart") :: () -> MeshPart
InstanceClasses.PartOperation = class("PartOperation") :: () -> PartOperation
InstanceClasses.IntersectOperation = class("IntersectOperation") :: () -> IntersectOperation
InstanceClasses.NegateOperation = class("NegateOperation") :: () -> NegateOperation
InstanceClasses.UnionOperation = class("UnionOperation") :: () -> UnionOperation
InstanceClasses.TrussPart = class("TrussPart") :: () -> TrussPart
InstanceClasses.VehicleSeat = class("VehicleSeat") :: () -> VehicleSeat
InstanceClasses.Model = class("Model") :: () -> Model
InstanceClasses.Actor = class("Actor") :: () -> Actor
InstanceClasses.BackpackItem = class("BackpackItem") :: () -> BackpackItem
InstanceClasses.HopperBin = class("HopperBin") :: () -> HopperBin
InstanceClasses.Tool = class("Tool") :: () -> Tool
InstanceClasses.Flag = class("Flag") :: () -> Flag
InstanceClasses.Status = class("Status") :: () -> Status
InstanceClasses.WorldRoot = class("WorldRoot") :: () -> WorldRoot
InstanceClasses.Workspace = class("Workspace") :: () -> Workspace
InstanceClasses.WorldModel = class("WorldModel") :: () -> WorldModel
InstanceClasses.PackageLink = class("PackageLink") :: () -> PackageLink
InstanceClasses.PackageService = class("PackageService") :: () -> PackageService
InstanceClasses.PackageUIService = class("PackageUIService") :: () -> PackageUIService
InstanceClasses.Pages = class("Pages") :: () -> Pages
InstanceClasses.AudioPages = class("AudioPages") :: () -> AudioPages
InstanceClasses.CatalogPages = class("CatalogPages") :: () -> CatalogPages
InstanceClasses.DataStoreKeyPages = class("DataStoreKeyPages") :: () -> DataStoreKeyPages
InstanceClasses.DataStoreListingPages = class("DataStoreListingPages") :: () -> DataStoreListingPages
InstanceClasses.DataStorePages = class("DataStorePages") :: () -> DataStorePages
InstanceClasses.DataStoreVersionPages = class("DataStoreVersionPages") :: () -> DataStoreVersionPages
InstanceClasses.FriendPages = class("FriendPages") :: () -> FriendPages
InstanceClasses.InventoryPages = class("InventoryPages") :: () -> InventoryPages
InstanceClasses.EmotesPages = class("EmotesPages") :: () -> EmotesPages
InstanceClasses.MemoryStoreHashMapPages = class("MemoryStoreHashMapPages") :: () -> MemoryStoreHashMapPages
InstanceClasses.OutfitPages = class("OutfitPages") :: () -> OutfitPages
InstanceClasses.StandardPages = class("StandardPages") :: () -> StandardPages
InstanceClasses.PartOperationAsset = class("PartOperationAsset") :: () -> PartOperationAsset
InstanceClasses.ParticleEmitter = class("ParticleEmitter") :: () -> ParticleEmitter
InstanceClasses.PatchBundlerFileWatch = class("PatchBundlerFileWatch") :: () -> PatchBundlerFileWatch
InstanceClasses.PatchMapping = class("PatchMapping") :: () -> PatchMapping
InstanceClasses.Path = class("Path") :: () -> Path
InstanceClasses.PathfindingLink = class("PathfindingLink") :: () -> PathfindingLink
InstanceClasses.PathfindingModifier = class("PathfindingModifier") :: () -> PathfindingModifier
InstanceClasses.PathfindingService = class("PathfindingService") :: () -> PathfindingService
InstanceClasses.PausedState = class("PausedState") :: () -> PausedState
InstanceClasses.PausedStateBreakpoint = class("PausedStateBreakpoint") :: () -> PausedStateBreakpoint
InstanceClasses.PausedStateException = class("PausedStateException") :: () -> PausedStateException
InstanceClasses.PermissionsService = class("PermissionsService") :: () -> PermissionsService
InstanceClasses.PhysicsService = class("PhysicsService") :: () -> PhysicsService
InstanceClasses.PhysicsSettings = class("PhysicsSettings") :: () -> PhysicsSettings
InstanceClasses.PlaceStatsService = class("PlaceStatsService") :: () -> PlaceStatsService
InstanceClasses.PlacesService = class("PlacesService") :: () -> PlacesService
InstanceClasses.PlatformCloudStorageService = class("PlatformCloudStorageService") :: () -> PlatformCloudStorageService
InstanceClasses.PlatformFriendsService = class("PlatformFriendsService") :: () -> PlatformFriendsService
InstanceClasses.Player = class("Player") :: () -> Player
InstanceClasses.PlayerEmulatorService = class("PlayerEmulatorService") :: () -> PlayerEmulatorService
InstanceClasses.PlayerScripts = class("PlayerScripts") :: () -> PlayerScripts
InstanceClasses.PlayerViewService = class("PlayerViewService") :: () -> PlayerViewService
InstanceClasses.Players = class("Players") :: () -> Players
InstanceClasses.Plugin = class("Plugin") :: () -> Plugin
InstanceClasses.PluginAction = class("PluginAction") :: () -> PluginAction
InstanceClasses.PluginCapabilities = class("PluginCapabilities") :: () -> PluginCapabilities
InstanceClasses.PluginDebugService = class("PluginDebugService") :: () -> PluginDebugService
InstanceClasses.PluginDragEvent = class("PluginDragEvent") :: () -> PluginDragEvent
InstanceClasses.PluginGuiService = class("PluginGuiService") :: () -> PluginGuiService
InstanceClasses.PluginManagementService = class("PluginManagementService") :: () -> PluginManagementService
InstanceClasses.PluginManager = class("PluginManager") :: () -> PluginManager
InstanceClasses.PluginManagerInterface = class("PluginManagerInterface") :: () -> PluginManagerInterface
InstanceClasses.PluginMenu = class("PluginMenu") :: () -> PluginMenu
InstanceClasses.PluginPolicyService = class("PluginPolicyService") :: () -> PluginPolicyService
InstanceClasses.PluginToolbar = class("PluginToolbar") :: () -> PluginToolbar
InstanceClasses.PluginToolbarButton = class("PluginToolbarButton") :: () -> PluginToolbarButton
InstanceClasses.PointsService = class("PointsService") :: () -> PointsService
InstanceClasses.PolicyService = class("PolicyService") :: () -> PolicyService
InstanceClasses.PoseBase = class("PoseBase") :: () -> PoseBase
InstanceClasses.NumberPose = class("NumberPose") :: () -> NumberPose
InstanceClasses.Pose = class("Pose") :: () -> Pose
InstanceClasses.PostEffect = class("PostEffect") :: () -> PostEffect
InstanceClasses.BloomEffect = class("BloomEffect") :: () -> BloomEffect
InstanceClasses.BlurEffect = class("BlurEffect") :: () -> BlurEffect
InstanceClasses.ColorCorrectionEffect = class("ColorCorrectionEffect") :: () -> ColorCorrectionEffect
InstanceClasses.DepthOfFieldEffect = class("DepthOfFieldEffect") :: () -> DepthOfFieldEffect
InstanceClasses.SunRaysEffect = class("SunRaysEffect") :: () -> SunRaysEffect
InstanceClasses.ProcessInstancePhysicsService =
	class("ProcessInstancePhysicsService") :: () -> ProcessInstancePhysicsService
InstanceClasses.ProximityPrompt = class("ProximityPrompt") :: () -> ProximityPrompt
InstanceClasses.ProximityPromptService = class("ProximityPromptService") :: () -> ProximityPromptService
InstanceClasses.PublishService = class("PublishService") :: () -> PublishService
InstanceClasses.RbxAnalyticsService = class("RbxAnalyticsService") :: () -> RbxAnalyticsService
InstanceClasses.ReflectionMetadata = class("ReflectionMetadata") :: () -> ReflectionMetadata
InstanceClasses.ReflectionMetadataCallbacks = class("ReflectionMetadataCallbacks") :: () -> ReflectionMetadataCallbacks
InstanceClasses.ReflectionMetadataClasses = class("ReflectionMetadataClasses") :: () -> ReflectionMetadataClasses
InstanceClasses.ReflectionMetadataEnums = class("ReflectionMetadataEnums") :: () -> ReflectionMetadataEnums
InstanceClasses.ReflectionMetadataEvents = class("ReflectionMetadataEvents") :: () -> ReflectionMetadataEvents
InstanceClasses.ReflectionMetadataFunctions = class("ReflectionMetadataFunctions") :: () -> ReflectionMetadataFunctions
InstanceClasses.ReflectionMetadataItem = class("ReflectionMetadataItem") :: () -> ReflectionMetadataItem
InstanceClasses.ReflectionMetadataClass = class("ReflectionMetadataClass") :: () -> ReflectionMetadataClass
InstanceClasses.ReflectionMetadataEnum = class("ReflectionMetadataEnum") :: () -> ReflectionMetadataEnum
InstanceClasses.ReflectionMetadataEnumItem = class("ReflectionMetadataEnumItem") :: () -> ReflectionMetadataEnumItem
InstanceClasses.ReflectionMetadataMember = class("ReflectionMetadataMember") :: () -> ReflectionMetadataMember
InstanceClasses.ReflectionMetadataProperties =
	class("ReflectionMetadataProperties") :: () -> ReflectionMetadataProperties
InstanceClasses.ReflectionMetadataYieldFunctions =
	class("ReflectionMetadataYieldFunctions") :: () -> ReflectionMetadataYieldFunctions
InstanceClasses.ReflectionService = class("ReflectionService") :: () -> ReflectionService
InstanceClasses.RemoteCursorService = class("RemoteCursorService") :: () -> RemoteCursorService
InstanceClasses.RemoteDebuggerServer = class("RemoteDebuggerServer") :: () -> RemoteDebuggerServer
InstanceClasses.RemoteFunction = class("RemoteFunction") :: () -> RemoteFunction
InstanceClasses.RenderSettings = class("RenderSettings") :: () -> RenderSettings
InstanceClasses.RenderingTest = class("RenderingTest") :: () -> RenderingTest
InstanceClasses.ReplicatedFirst = class("ReplicatedFirst") :: () -> ReplicatedFirst
InstanceClasses.ReplicatedStorage = class("ReplicatedStorage") :: () -> ReplicatedStorage
InstanceClasses.RibbonNotificationService = class("RibbonNotificationService") :: () -> RibbonNotificationService
InstanceClasses.RobloxPluginGuiService = class("RobloxPluginGuiService") :: () -> RobloxPluginGuiService
InstanceClasses.RobloxReplicatedStorage = class("RobloxReplicatedStorage") :: () -> RobloxReplicatedStorage
InstanceClasses.RobloxServerStorage = class("RobloxServerStorage") :: () -> RobloxServerStorage
InstanceClasses.RomarkService = class("RomarkService") :: () -> RomarkService
InstanceClasses.RotationCurve = class("RotationCurve") :: () -> RotationCurve
InstanceClasses.RtMessagingService = class("RtMessagingService") :: () -> RtMessagingService
InstanceClasses.RunService = class("RunService") :: () -> RunService
InstanceClasses.RuntimeScriptService = class("RuntimeScriptService") :: () -> RuntimeScriptService
InstanceClasses.SafetyService = class("SafetyService") :: () -> SafetyService
InstanceClasses.ScreenshotHud = class("ScreenshotHud") :: () -> ScreenshotHud
InstanceClasses.ScriptBuilder = class("ScriptBuilder") :: () -> ScriptBuilder
InstanceClasses.SyncScriptBuilder = class("SyncScriptBuilder") :: () -> SyncScriptBuilder
InstanceClasses.ScriptChangeService = class("ScriptChangeService") :: () -> ScriptChangeService
InstanceClasses.ScriptCloneWatcher = class("ScriptCloneWatcher") :: () -> ScriptCloneWatcher
InstanceClasses.ScriptCloneWatcherHelper = class("ScriptCloneWatcherHelper") :: () -> ScriptCloneWatcherHelper
InstanceClasses.ScriptCommitService = class("ScriptCommitService") :: () -> ScriptCommitService
InstanceClasses.ScriptContext = class("ScriptContext") :: () -> ScriptContext
InstanceClasses.ScriptDebugger = class("ScriptDebugger") :: () -> ScriptDebugger
InstanceClasses.ScriptDocument = class("ScriptDocument") :: () -> ScriptDocument
InstanceClasses.ScriptEditorService = class("ScriptEditorService") :: () -> ScriptEditorService
InstanceClasses.ScriptRegistrationService = class("ScriptRegistrationService") :: () -> ScriptRegistrationService
InstanceClasses.ScriptRuntime = class("ScriptRuntime") :: () -> ScriptRuntime
InstanceClasses.ScriptService = class("ScriptService") :: () -> ScriptService
InstanceClasses.Selection = class("Selection") :: () -> Selection
InstanceClasses.SelectionHighlightManager = class("SelectionHighlightManager") :: () -> SelectionHighlightManager
InstanceClasses.SensorBase = class("SensorBase") :: () -> SensorBase
InstanceClasses.BuoyancySensor = class("BuoyancySensor") :: () -> BuoyancySensor
InstanceClasses.ControllerSensor = class("ControllerSensor") :: () -> ControllerSensor
InstanceClasses.ControllerPartSensor = class("ControllerPartSensor") :: () -> ControllerPartSensor
InstanceClasses.ServerScriptService = class("ServerScriptService") :: () -> ServerScriptService
InstanceClasses.ServerStorage = class("ServerStorage") :: () -> ServerStorage
InstanceClasses.ServiceProvider = class("ServiceProvider") :: () -> ServiceProvider
InstanceClasses.DataModel = class("DataModel") :: () -> DataModel
InstanceClasses.GenericSettings = class("GenericSettings") :: () -> GenericSettings
InstanceClasses.AnalysticsSettings = class("AnalysticsSettings") :: () -> AnalysticsSettings
InstanceClasses.GlobalSettings = class("GlobalSettings") :: () -> GlobalSettings
InstanceClasses.UserSettings = class("UserSettings") :: () -> UserSettings
InstanceClasses.ServiceVisibilityService = class("ServiceVisibilityService") :: () -> ServiceVisibilityService
InstanceClasses.SessionService = class("SessionService") :: () -> SessionService
InstanceClasses.SharedTableRegistry = class("SharedTableRegistry") :: () -> SharedTableRegistry
InstanceClasses.ShorelineUpgraderService = class("ShorelineUpgraderService") :: () -> ShorelineUpgraderService
InstanceClasses.Sky = class("Sky") :: () -> Sky
InstanceClasses.Smoke = class("Smoke") :: () -> Smoke
InstanceClasses.SmoothVoxelsUpgraderService = class("SmoothVoxelsUpgraderService") :: () -> SmoothVoxelsUpgraderService
InstanceClasses.SnippetService = class("SnippetService") :: () -> SnippetService
InstanceClasses.SocialService = class("SocialService") :: () -> SocialService
InstanceClasses.Sound = class("Sound") :: () -> Sound
InstanceClasses.SoundEffect = class("SoundEffect") :: () -> SoundEffect
InstanceClasses.ChorusSoundEffect = class("ChorusSoundEffect") :: () -> ChorusSoundEffect
InstanceClasses.CompressorSoundEffect = class("CompressorSoundEffect") :: () -> CompressorSoundEffect
InstanceClasses.CustomSoundEffect = class("CustomSoundEffect") :: () -> CustomSoundEffect
InstanceClasses.AssetSoundEffect = class("AssetSoundEffect") :: () -> AssetSoundEffect
InstanceClasses.ChannelSelectorSoundEffect = class("ChannelSelectorSoundEffect") :: () -> ChannelSelectorSoundEffect
InstanceClasses.DistortionSoundEffect = class("DistortionSoundEffect") :: () -> DistortionSoundEffect
InstanceClasses.EchoSoundEffect = class("EchoSoundEffect") :: () -> EchoSoundEffect
InstanceClasses.EqualizerSoundEffect = class("EqualizerSoundEffect") :: () -> EqualizerSoundEffect
InstanceClasses.FlangeSoundEffect = class("FlangeSoundEffect") :: () -> FlangeSoundEffect
InstanceClasses.PitchShiftSoundEffect = class("PitchShiftSoundEffect") :: () -> PitchShiftSoundEffect
InstanceClasses.ReverbSoundEffect = class("ReverbSoundEffect") :: () -> ReverbSoundEffect
InstanceClasses.TremoloSoundEffect = class("TremoloSoundEffect") :: () -> TremoloSoundEffect
InstanceClasses.SoundGroup = class("SoundGroup") :: () -> SoundGroup
InstanceClasses.SoundService = class("SoundService") :: () -> SoundService
InstanceClasses.Sparkles = class("Sparkles") :: () -> Sparkles
InstanceClasses.SpawnerService = class("SpawnerService") :: () -> SpawnerService
InstanceClasses.StackFrame = class("StackFrame") :: () -> StackFrame
InstanceClasses.StandalonePluginScripts = class("StandalonePluginScripts") :: () -> StandalonePluginScripts
InstanceClasses.StarterGear = class("StarterGear") :: () -> StarterGear
InstanceClasses.StarterPack = class("StarterPack") :: () -> StarterPack
InstanceClasses.StarterPlayer = class("StarterPlayer") :: () -> StarterPlayer
InstanceClasses.StarterPlayerScripts = class("StarterPlayerScripts") :: () -> StarterPlayerScripts
InstanceClasses.StarterCharacterScripts = class("StarterCharacterScripts") :: () -> StarterCharacterScripts
InstanceClasses.Stats = class("Stats") :: () -> Stats
InstanceClasses.StatsItem = class("StatsItem") :: () -> StatsItem
InstanceClasses.RunningAverageItemDouble = class("RunningAverageItemDouble") :: () -> RunningAverageItemDouble
InstanceClasses.RunningAverageItemInt = class("RunningAverageItemInt") :: () -> RunningAverageItemInt
InstanceClasses.RunningAverageTimeIntervalItem =
	class("RunningAverageTimeIntervalItem") :: () -> RunningAverageTimeIntervalItem
InstanceClasses.TotalCountTimeIntervalItem = class("TotalCountTimeIntervalItem") :: () -> TotalCountTimeIntervalItem
InstanceClasses.StopWatchReporter = class("StopWatchReporter") :: () -> StopWatchReporter
InstanceClasses.StreamingService = class("StreamingService") :: () -> StreamingService
InstanceClasses.Studio = class("Studio") :: () -> Studio
InstanceClasses.StudioAssetService = class("StudioAssetService") :: () -> StudioAssetService
InstanceClasses.StudioAttachment = class("StudioAttachment") :: () -> StudioAttachment
InstanceClasses.StudioCallout = class("StudioCallout") :: () -> StudioCallout
InstanceClasses.StudioData = class("StudioData") :: () -> StudioData
InstanceClasses.StudioDeviceEmulatorService = class("StudioDeviceEmulatorService") :: () -> StudioDeviceEmulatorService
InstanceClasses.StudioObjectBase = class("StudioObjectBase") :: () -> StudioObjectBase
InstanceClasses.StudioWidget = class("StudioWidget") :: () -> StudioWidget
InstanceClasses.StudioPublishService = class("StudioPublishService") :: () -> StudioPublishService
InstanceClasses.StudioScriptDebugEventListener =
	class("StudioScriptDebugEventListener") :: () -> StudioScriptDebugEventListener
InstanceClasses.StudioSdkService = class("StudioSdkService") :: () -> StudioSdkService
InstanceClasses.StudioService = class("StudioService") :: () -> StudioService
InstanceClasses.StudioTheme = class("StudioTheme") :: () -> StudioTheme
InstanceClasses.StudioWidgetsService = class("StudioWidgetsService") :: () -> StudioWidgetsService
InstanceClasses.StyleBase = class("StyleBase") :: () -> StyleBase
InstanceClasses.StyleRule = class("StyleRule") :: () -> StyleRule
InstanceClasses.StyleSheet = class("StyleSheet") :: () -> StyleSheet
InstanceClasses.StyleDerive = class("StyleDerive") :: () -> StyleDerive
InstanceClasses.StyleLink = class("StyleLink") :: () -> StyleLink
InstanceClasses.StylingService = class("StylingService") :: () -> StylingService
InstanceClasses.SurfaceAppearance = class("SurfaceAppearance") :: () -> SurfaceAppearance
InstanceClasses.TaskScheduler = class("TaskScheduler") :: () -> TaskScheduler
InstanceClasses.Team = class("Team") :: () -> Team
InstanceClasses.TeamCreateData = class("TeamCreateData") :: () -> TeamCreateData
InstanceClasses.TeamCreatePublishService = class("TeamCreatePublishService") :: () -> TeamCreatePublishService
InstanceClasses.TeamCreateService = class("TeamCreateService") :: () -> TeamCreateService
InstanceClasses.Teams = class("Teams") :: () -> Teams
InstanceClasses.TeleportAsyncResult = class("TeleportAsyncResult") :: () -> TeleportAsyncResult
InstanceClasses.TeleportOptions = class("TeleportOptions") :: () -> TeleportOptions
InstanceClasses.TeleportService = class("TeleportService") :: () -> TeleportService
InstanceClasses.TemporaryCageMeshProvider = class("TemporaryCageMeshProvider") :: () -> TemporaryCageMeshProvider
InstanceClasses.TemporaryScriptService = class("TemporaryScriptService") :: () -> TemporaryScriptService
InstanceClasses.TerrainDetail = class("TerrainDetail") :: () -> TerrainDetail
InstanceClasses.TerrainRegion = class("TerrainRegion") :: () -> TerrainRegion
InstanceClasses.TestService = class("TestService") :: () -> TestService
InstanceClasses.TextBoxService = class("TextBoxService") :: () -> TextBoxService
InstanceClasses.TextChannel = class("TextChannel") :: () -> TextChannel
InstanceClasses.TextChatCommand = class("TextChatCommand") :: () -> TextChatCommand
InstanceClasses.TextChatConfigurations = class("TextChatConfigurations") :: () -> TextChatConfigurations
InstanceClasses.BubbleChatConfiguration = class("BubbleChatConfiguration") :: () -> BubbleChatConfiguration
InstanceClasses.ChatInputBarConfiguration = class("ChatInputBarConfiguration") :: () -> ChatInputBarConfiguration
InstanceClasses.ChatWindowConfiguration = class("ChatWindowConfiguration") :: () -> ChatWindowConfiguration
InstanceClasses.TextChatMessage = class("TextChatMessage") :: () -> TextChatMessage
InstanceClasses.TextChatMessageProperties = class("TextChatMessageProperties") :: () -> TextChatMessageProperties
InstanceClasses.TextChatService = class("TextChatService") :: () -> TextChatService
InstanceClasses.TextFilterResult = class("TextFilterResult") :: () -> TextFilterResult
InstanceClasses.TextFilterTranslatedResult = class("TextFilterTranslatedResult") :: () -> TextFilterTranslatedResult
InstanceClasses.TextService = class("TextService") :: () -> TextService
InstanceClasses.TextSource = class("TextSource") :: () -> TextSource
InstanceClasses.ThirdPartyUserService = class("ThirdPartyUserService") :: () -> ThirdPartyUserService
InstanceClasses.ThreadState = class("ThreadState") :: () -> ThreadState
InstanceClasses.TimerService = class("TimerService") :: () -> TimerService
InstanceClasses.ToastNotificationService = class("ToastNotificationService") :: () -> ToastNotificationService
InstanceClasses.TouchInputService = class("TouchInputService") :: () -> TouchInputService
InstanceClasses.TouchTransmitter = class("TouchTransmitter") :: () -> TouchTransmitter
InstanceClasses.TracerService = class("TracerService") :: () -> TracerService
InstanceClasses.TrackerLodController = class("TrackerLodController") :: () -> TrackerLodController
InstanceClasses.TrackerStreamAnimation = class("TrackerStreamAnimation") :: () -> TrackerStreamAnimation
InstanceClasses.Trail = class("Trail") :: () -> Trail
InstanceClasses.Translator = class("Translator") :: () -> Translator
InstanceClasses.TutorialService = class("TutorialService") :: () -> TutorialService
InstanceClasses.TweenBase = class("TweenBase") :: () -> TweenBase
InstanceClasses.Tween = class("Tween") :: () -> Tween
InstanceClasses.TweenService = class("TweenService") :: () -> TweenService
InstanceClasses.UGCAvatarService = class("UGCAvatarService") :: () -> UGCAvatarService
InstanceClasses.UGCValidationService = class("UGCValidationService") :: () -> UGCValidationService
InstanceClasses.UIBase = class("UIBase") :: () -> UIBase
InstanceClasses.UIComponent = class("UIComponent") :: () -> UIComponent
InstanceClasses.UIConstraint = class("UIConstraint") :: () -> UIConstraint
InstanceClasses.UIAspectRatioConstraint = class("UIAspectRatioConstraint") :: () -> UIAspectRatioConstraint
InstanceClasses.UISizeConstraint = class("UISizeConstraint") :: () -> UISizeConstraint
InstanceClasses.UITextSizeConstraint = class("UITextSizeConstraint") :: () -> UITextSizeConstraint
InstanceClasses.UICorner = class("UICorner") :: () -> UICorner
InstanceClasses.UIFlexItem = class("UIFlexItem") :: () -> UIFlexItem
InstanceClasses.UIGradient = class("UIGradient") :: () -> UIGradient
InstanceClasses.UILayout = class("UILayout") :: () -> UILayout
InstanceClasses.UIGridStyleLayout = class("UIGridStyleLayout") :: () -> UIGridStyleLayout
InstanceClasses.UIGridLayout = class("UIGridLayout") :: () -> UIGridLayout
InstanceClasses.UIListLayout = class("UIListLayout") :: () -> UIListLayout
InstanceClasses.UIPageLayout = class("UIPageLayout") :: () -> UIPageLayout
InstanceClasses.UITableLayout = class("UITableLayout") :: () -> UITableLayout
InstanceClasses.UIPadding = class("UIPadding") :: () -> UIPadding
InstanceClasses.UIScale = class("UIScale") :: () -> UIScale
InstanceClasses.UIStroke = class("UIStroke") :: () -> UIStroke
InstanceClasses.UnvalidatedAssetService = class("UnvalidatedAssetService") :: () -> UnvalidatedAssetService
InstanceClasses.UserGameSettings = class("UserGameSettings") :: () -> UserGameSettings
InstanceClasses.UserInputService = class("UserInputService") :: () -> UserInputService
InstanceClasses.UserService = class("UserService") :: () -> UserService
InstanceClasses.VRService = class("VRService") :: () -> VRService
InstanceClasses.VRStatusService = class("VRStatusService") :: () -> VRStatusService
InstanceClasses.ValueBase = class("ValueBase") :: () -> ValueBase
InstanceClasses.BinaryStringValue = class("BinaryStringValue") :: () -> BinaryStringValue
InstanceClasses.BoolValue = class("BoolValue") :: () -> BoolValue
InstanceClasses.BrickColorValue = class("BrickColorValue") :: () -> BrickColorValue
InstanceClasses.CFrameValue = class("CFrameValue") :: () -> CFrameValue
InstanceClasses.Color3Value = class("Color3Value") :: () -> Color3Value
InstanceClasses.DoubleConstrainedValue = class("DoubleConstrainedValue") :: () -> DoubleConstrainedValue
InstanceClasses.IntConstrainedValue = class("IntConstrainedValue") :: () -> IntConstrainedValue
InstanceClasses.IntValue = class("IntValue") :: () -> IntValue
InstanceClasses.NumberValue = class("NumberValue") :: () -> NumberValue
InstanceClasses.ObjectValue = class("ObjectValue") :: () -> ObjectValue
InstanceClasses.RayValue = class("RayValue") :: () -> RayValue
InstanceClasses.StringValue = class("StringValue") :: () -> StringValue
InstanceClasses.Vector3Value = class("Vector3Value") :: () -> Vector3Value
InstanceClasses.Vector3Curve = class("Vector3Curve") :: () -> Vector3Curve
InstanceClasses.VersionControlService = class("VersionControlService") :: () -> VersionControlService
InstanceClasses.VideoCaptureService = class("VideoCaptureService") :: () -> VideoCaptureService
InstanceClasses.VideoService = class("VideoService") :: () -> VideoService
InstanceClasses.VirtualInputManager = class("VirtualInputManager") :: () -> VirtualInputManager
InstanceClasses.VirtualUser = class("VirtualUser") :: () -> VirtualUser
InstanceClasses.VisibilityCheckDispatcher = class("VisibilityCheckDispatcher") :: () -> VisibilityCheckDispatcher
InstanceClasses.Visit = class("Visit") :: () -> Visit
InstanceClasses.VoiceChatInternal = class("VoiceChatInternal") :: () -> VoiceChatInternal
InstanceClasses.VoiceChatService = class("VoiceChatService") :: () -> VoiceChatService
InstanceClasses.WeldConstraint = class("WeldConstraint") :: () -> WeldConstraint
InstanceClasses.Wire = class("Wire") :: () -> Wire
InstanceClasses.PathWaypoint = class("PathWaypoint") :: () -> PathWaypoint

return InstanceClasses
